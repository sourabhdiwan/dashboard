# config.py
import os

class Config:
    DEBUG = False
    TESTING = False

class DevelopmentConfig(Config):
    DEBUG = True
    DB_USER = os.getenv('DEV_DB_USER')
    DB_PASSWORD = os.getenv('DEV_DB_PASSWORD')
    DB_DSN = os.getenv('DEV_DB_DSN')

class TestingConfig(Config):
    TESTING = True
    DB_USER = os.getenv('TEST_DB_USER')
    DB_PASSWORD = os.getenv('TEST_DB_PASSWORD')
    DB_DSN = os.getenv('TEST_DB_DSN')

class StagingConfig(Config):
    DB_USER = os.getenv('STAGE_DB_USER')
    DB_PASSWORD = os.getenv('STAGE_DB_PASSWORD')
    DB_DSN = os.getenv('STAGE_DB_DSN')

class ProductionConfig(Config):
    DB_USER = os.getenv('PROD_DB_USER')
    DB_PASSWORD = os.getenv('PROD_DB_PASSWORD')
    DB_DSN = os.getenv('PROD_DB_DSN')

config_dict = {
    'development': DevelopmentConfig,
    'testing': TestingConfig,
    'staging': StagingConfig,
    'production': ProductionConfig,
}




# db.py
import os
import oracledb
from config import config_dict
from dotenv import load_dotenv

load_dotenv()

def get_db_connection(env):
    # Initialize Oracle client (Thin mode)
    oracledb.init_oracle_client()

    # Load environment-specific configuration
    config = config_dict[env]
    db_user = config.DB_USER
    db_password = config.DB_PASSWORD
    db_dsn = config.DB_DSN

    # Connect to the Oracle database
    connection = oracledb.connect(
        user=db_user,
        password=db_password,
        dsn=db_dsn
    )
    return connection

def fetch_data_from_db(env):
    connection = get_db_connection(env)
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM your_table")
    results = cursor.fetchall()
    cursor.close()
    connection.close()
    return results

def fetch_data_from_all_envs():
    results = {}
    for env in config_dict.keys():
        results[env] = fetch_data_from_db(env)
    return results





# app.py
from flask import Flask, render_template
import db

app = Flask(__name__)

@app.route('/')
def index():
    try:
        # Fetch data from all environments
        all_results = db.fetch_data_from_all_envs()
        # Render the results in the HTML template
        return render_template('index.html', results=all_results)
    except oracledb.DatabaseError as e:
        # Handle database connection errors
        error, = e.args
        return f"Error connecting to the database: {error.message}"

if __name__ == '__main__':
    app.run(debug=True)





<!-- templates/index.html -->
<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Oracle Query Results</title>
</head>
<body>
    <h1>Oracle Query Results</h1>
    {% for env, env_results in results.items() %}
    <h2>Environment: {{ env }}</h2>
    <table border="1">
        <thead>
            <tr>
                <!-- Adjust the table headers based on your table columns -->
                <th>Column 1</th>
                <th>Column 2</th>
                <th>Column 3</th>
                <!-- Add more headers as needed -->
            </tr>
        </thead>
        <tbody>
            {% for row in env_results %}
            <tr>
                {% for column in row %}
                <td>{{ column }}</td>
                {% endfor %}
            </tr>
            {% endfor %}
        </tbody>
    </table>
    {% endfor %}
</body>
</html>
