import re
import os
import uuid
import pymqi
import cx_Oracle
import logging
import glob

# Configuration details
MQ_QUEUE_NAME = "YOUR_QUEUE_NAME"
MQ_CHANNEL = "YOUR_CHANNEL_NAME"
MQ_QUEUE_MANAGER = "YOUR_QUEUE_MANAGER"
MQ_HOST = "YOUR_MQ_HOST"
MQ_PORT = "YOUR_MQ_PORT"
ORACLE_DSN = cx_Oracle.makedsn("YOUR_ORACLE_HOST", "YOUR_ORACLE_PORT", service_name="YOUR_SERVICE_NAME")
ORACLE_USER = "YOUR_ORACLE_USER"
ORACLE_PASSWORD = "YOUR_ORACLE_PASSWORD"
XML_FOLDER_PATH = "YOUR_XML_FOLDER_PATH"
MODIFIED_XML_FOLDER_PATH = "YOUR_MODIFIED_XML_FOLDER_PATH"

os.makedirs(MODIFIED_XML_FOLDER_PATH, exist_ok=True)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

uetr_values = {}  # To hold UETR values

# Function to replace UETR content
def replace_uetr(xml_file, content):
    original_uetr_tags = re.findall(r'<UETR>.*?</UETR>', content)
    modified_content = content
    new_uetr_values = []

    for tag in original_uetr_tags:
        new_uuid = str(uuid.uuid4())
        new_uetr_tag = f'<UETR>{new_uuid}</UETR>'
        modified_content = modified_content.replace(tag, new_uetr_tag, 1)  # Replace only first occurrence
        new_uetr_values.append(new_uuid)

    uetr_values[xml_file] = new_uetr_values
    return modified_content

# MQ connection and processing
try:
    qmgr = pymqi.connect(MQ_QUEUE_MANAGER, MQ_CHANNEL, MQ_HOST + f"({MQ_PORT})")
    queue = pymqi.Queue(qmgr, MQ_QUEUE_NAME)

    xml_files = glob.glob(os.path.join(XML_FOLDER_PATH, "*.xml"))
    for xml_file in xml_files:
        with open(xml_file, 'r', encoding='utf-8') as file:
            original_content = file.read()
            modified_content = replace_uetr(xml_file, original_content)

        # Inject into MQ
        queue.put(modified_content)
        logging.info("Injected modified message from %s into MQ", xml_file)

    queue.close()
    qmgr.disconnect()
except Exception as e:
    logging.error("Error during MQ operations: %s", str(e))
    raise

# Database verification
try:
    with cx_Oracle.connect(ORACLE_USER, ORACLE_PASSWORD, ORACLE_DSN) as connection:
        cursor = connection.cursor()
        for xml_file, uetrs in uetr_values.items():
            for uetr in uetrs:
                query = "SELECT * FROM YOUR_TABLE WHERE UETR_COLUMN = :uetr"
                cursor.execute(query, {"uetr": uetr})
                result = cursor.fetchone()
                if result:
                    logging.info("Verified UETR %s from %s in Oracle DB", uetr, xml_file)
                else:
                    logging.warning("UETR %s from %s not found in Oracle DB", uetr, xml_file)
except cx_Oracle.Error as e:
    logging.error("Error connecting to Oracle DB or executing query: %s", str(e))
    raise
