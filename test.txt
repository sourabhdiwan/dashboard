import pymqi
import cx_Oracle
import os
import logging
import glob
import uuid
import re
from datetime import datetime

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Configuration for MQ
MQ_QUEUE_NAME = "YOUR_QUEUE_NAME"
MQ_CHANNEL = "YOUR_CHANNEL_NAME"
MQ_QUEUE_MANAGER = "YOUR_QUEUE_MANAGER"
MQ_HOST = "YOUR_MQ_HOST"
MQ_PORT = "YOUR_MQ_PORT"

# Configuration for Oracle DB
ORACLE_DSN = cx_Oracle.makedsn("YOUR_ORACLE_HOST", "YOUR_ORACLE_PORT", service_name="YOUR_SERVICE_NAME")
ORACLE_USER = "YOUR_ORACLE_USER"
ORACLE_PASSWORD = "YOUR_ORACLE_PASSWORD"

# Path to the folder with XML files
XML_FOLDER_PATH = "YOUR_XML_FOLDER_PATH"  # Update to your XML folder path

# Function to modify XML content as plain text
def modify_xml_content(xml_content):
    # Replace <UETR> tags with UUID
    xml_content = re.sub(r'<UETR>.*?</UETR>', lambda x: f'<UETR>{uuid.uuid4()}</UETR>', xml_content)
    
    # Replace <PymtUid> tags with unique ID
    timestamp_str = datetime.now().strftime("%d%m%y%H%M")
    unique_pymt_uid = f"M1{timestamp_str}"
    xml_content = re.sub(r'<PymtUid>.*?</PymtUid>', f'<PymtUid>{unique_pymt_uid}</PymtUid>', xml_content)
    
    return xml_content

# Step 2: Connect to MQ and inject modified messages
try:
    qmgr = pymqi.connect(MQ_QUEUE_MANAGER, MQ_CHANNEL, MQ_HOST + f"({MQ_PORT})")
    queue = pymqi.Queue(qmgr, MQ_QUEUE_NAME)

    xml_files = glob.glob(os.path.join(XML_FOLDER_PATH, "*.xml"))

    if not xml_files:
        raise FileNotFoundError(f"No XML files found in folder: {XML_FOLDER_PATH}")

    for xml_file in xml_files:
        with open(xml_file, 'r', encoding='utf-8') as file:
            original_content = file.read()  # Read original XML content
            modified_content = modify_xml_content(original_content)  # Modify XML content
            queue.put(modified_content)  # Inject modified content into MQ
            logging.info("Injected modified message from %s into MQ", xml_file)

    queue.close()
    qmgr.disconnect()

except Exception as e:
    logging.error("Error injecting messages into MQ: %s", str(e))
    raise

# Step 3: Connect to Oracle DB to verify modified messages
try:
    with cx_Oracle.connect(ORACLE_USER, ORACLE_PASSWORD, ORACLE_DSN) as connection:
        cursor = connection.cursor()
        query = "SELECT * FROM YOUR_TABLE WHERE YOUR_COLUMN = :value"
        
        for xml_file in xml_files:
            with open(xml_file, 'r', encoding='utf-8') as file:
                original_content = file.read()
                modified_content = modify_xml_content(original_content)  # Apply the same modifications

            cursor.execute(query, {"value": modified_content.strip()})
            result = cursor.fetchone()

            if result:
                logging.info("Verified modified message from %s in Oracle DB", xml_file)
            else:
                logging.warning("Modified message from %s not found in Oracle DB", xml_file)

except cx_Oracle.Error as e:
    logging.error("Error connecting to Oracle DB or executing query: %s", str(e))
    raise
